// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/ymir"
)

// Ymir is the model entity for the Ymir schema.
type Ymir struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version      string `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ymir) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ymir.FieldID:
			values[i] = new(sql.NullInt64)
		case ymir.FieldVersion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ymir fields.
func (y *Ymir) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ymir.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			y.ID = int(value.Int64)
		case ymir.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				y.Version = value.String
			}
		default:
			y.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ymir.
// This includes values selected through modifiers, order, etc.
func (y *Ymir) Value(name string) (ent.Value, error) {
	return y.selectValues.Get(name)
}

// Update returns a builder for updating this Ymir.
// Note that you need to call Ymir.Unwrap() before calling this method if this Ymir
// was returned from a transaction, and the transaction was committed or rolled back.
func (y *Ymir) Update() *YmirUpdateOne {
	return NewYmirClient(y.config).UpdateOne(y)
}

// Unwrap unwraps the Ymir entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (y *Ymir) Unwrap() *Ymir {
	_tx, ok := y.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ymir is not a transactional entity")
	}
	y.config.driver = _tx.drv
	return y
}

// String implements the fmt.Stringer.
func (y *Ymir) String() string {
	var builder strings.Builder
	builder.WriteString("Ymir(")
	builder.WriteString(fmt.Sprintf("id=%v, ", y.ID))
	builder.WriteString("version=")
	builder.WriteString(y.Version)
	builder.WriteByte(')')
	return builder.String()
}

// Ymirs is a parsable slice of Ymir.
type Ymirs []*Ymir
