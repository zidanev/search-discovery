// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/predicate"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/ymir"
)

// YmirDelete is the builder for deleting a Ymir entity.
type YmirDelete struct {
	config
	hooks    []Hook
	mutation *YmirMutation
}

// Where appends a list predicates to the YmirDelete builder.
func (yd *YmirDelete) Where(ps ...predicate.Ymir) *YmirDelete {
	yd.mutation.Where(ps...)
	return yd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (yd *YmirDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, yd.sqlExec, yd.mutation, yd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (yd *YmirDelete) ExecX(ctx context.Context) int {
	n, err := yd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (yd *YmirDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ymir.Table, sqlgraph.NewFieldSpec(ymir.FieldID, field.TypeInt))
	if ps := yd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, yd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	yd.mutation.done = true
	return affected, err
}

// YmirDeleteOne is the builder for deleting a single Ymir entity.
type YmirDeleteOne struct {
	yd *YmirDelete
}

// Where appends a list predicates to the YmirDelete builder.
func (ydo *YmirDeleteOne) Where(ps ...predicate.Ymir) *YmirDeleteOne {
	ydo.yd.mutation.Where(ps...)
	return ydo
}

// Exec executes the deletion query.
func (ydo *YmirDeleteOne) Exec(ctx context.Context) error {
	n, err := ydo.yd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ymir.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ydo *YmirDeleteOne) ExecX(ctx context.Context) {
	if err := ydo.Exec(ctx); err != nil {
		panic(err)
	}
}
