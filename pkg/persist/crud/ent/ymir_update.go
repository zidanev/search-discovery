// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/predicate"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/ymir"
)

// YmirUpdate is the builder for updating Ymir entities.
type YmirUpdate struct {
	config
	hooks    []Hook
	mutation *YmirMutation
}

// Where appends a list predicates to the YmirUpdate builder.
func (yu *YmirUpdate) Where(ps ...predicate.Ymir) *YmirUpdate {
	yu.mutation.Where(ps...)
	return yu
}

// SetVersion sets the "version" field.
func (yu *YmirUpdate) SetVersion(s string) *YmirUpdate {
	yu.mutation.SetVersion(s)
	return yu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (yu *YmirUpdate) SetNillableVersion(s *string) *YmirUpdate {
	if s != nil {
		yu.SetVersion(*s)
	}
	return yu
}

// Mutation returns the YmirMutation object of the builder.
func (yu *YmirUpdate) Mutation() *YmirMutation {
	return yu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (yu *YmirUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, yu.sqlSave, yu.mutation, yu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (yu *YmirUpdate) SaveX(ctx context.Context) int {
	affected, err := yu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (yu *YmirUpdate) Exec(ctx context.Context) error {
	_, err := yu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yu *YmirUpdate) ExecX(ctx context.Context) {
	if err := yu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (yu *YmirUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ymir.Table, ymir.Columns, sqlgraph.NewFieldSpec(ymir.FieldID, field.TypeInt))
	if ps := yu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := yu.mutation.Version(); ok {
		_spec.SetField(ymir.FieldVersion, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, yu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ymir.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	yu.mutation.done = true
	return n, nil
}

// YmirUpdateOne is the builder for updating a single Ymir entity.
type YmirUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *YmirMutation
}

// SetVersion sets the "version" field.
func (yuo *YmirUpdateOne) SetVersion(s string) *YmirUpdateOne {
	yuo.mutation.SetVersion(s)
	return yuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (yuo *YmirUpdateOne) SetNillableVersion(s *string) *YmirUpdateOne {
	if s != nil {
		yuo.SetVersion(*s)
	}
	return yuo
}

// Mutation returns the YmirMutation object of the builder.
func (yuo *YmirUpdateOne) Mutation() *YmirMutation {
	return yuo.mutation
}

// Where appends a list predicates to the YmirUpdate builder.
func (yuo *YmirUpdateOne) Where(ps ...predicate.Ymir) *YmirUpdateOne {
	yuo.mutation.Where(ps...)
	return yuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (yuo *YmirUpdateOne) Select(field string, fields ...string) *YmirUpdateOne {
	yuo.fields = append([]string{field}, fields...)
	return yuo
}

// Save executes the query and returns the updated Ymir entity.
func (yuo *YmirUpdateOne) Save(ctx context.Context) (*Ymir, error) {
	return withHooks(ctx, yuo.sqlSave, yuo.mutation, yuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (yuo *YmirUpdateOne) SaveX(ctx context.Context) *Ymir {
	node, err := yuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (yuo *YmirUpdateOne) Exec(ctx context.Context) error {
	_, err := yuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yuo *YmirUpdateOne) ExecX(ctx context.Context) {
	if err := yuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (yuo *YmirUpdateOne) sqlSave(ctx context.Context) (_node *Ymir, err error) {
	_spec := sqlgraph.NewUpdateSpec(ymir.Table, ymir.Columns, sqlgraph.NewFieldSpec(ymir.FieldID, field.TypeInt))
	id, ok := yuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ymir.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := yuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ymir.FieldID)
		for _, f := range fields {
			if !ymir.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ymir.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := yuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := yuo.mutation.Version(); ok {
		_spec.SetField(ymir.FieldVersion, field.TypeString, value)
	}
	_node = &Ymir{config: yuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, yuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ymir.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	yuo.mutation.done = true
	return _node, nil
}
