// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/ymir"
)

// YmirCreate is the builder for creating a Ymir entity.
type YmirCreate struct {
	config
	mutation *YmirMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (yc *YmirCreate) SetVersion(s string) *YmirCreate {
	yc.mutation.SetVersion(s)
	return yc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (yc *YmirCreate) SetNillableVersion(s *string) *YmirCreate {
	if s != nil {
		yc.SetVersion(*s)
	}
	return yc
}

// Mutation returns the YmirMutation object of the builder.
func (yc *YmirCreate) Mutation() *YmirMutation {
	return yc.mutation
}

// Save creates the Ymir in the database.
func (yc *YmirCreate) Save(ctx context.Context) (*Ymir, error) {
	yc.defaults()
	return withHooks(ctx, yc.sqlSave, yc.mutation, yc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (yc *YmirCreate) SaveX(ctx context.Context) *Ymir {
	v, err := yc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (yc *YmirCreate) Exec(ctx context.Context) error {
	_, err := yc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yc *YmirCreate) ExecX(ctx context.Context) {
	if err := yc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (yc *YmirCreate) defaults() {
	if _, ok := yc.mutation.Version(); !ok {
		v := ymir.DefaultVersion
		yc.mutation.SetVersion(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (yc *YmirCreate) check() error {
	if _, ok := yc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Ymir.version"`)}
	}
	return nil
}

func (yc *YmirCreate) sqlSave(ctx context.Context) (*Ymir, error) {
	if err := yc.check(); err != nil {
		return nil, err
	}
	_node, _spec := yc.createSpec()
	if err := sqlgraph.CreateNode(ctx, yc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	yc.mutation.id = &_node.ID
	yc.mutation.done = true
	return _node, nil
}

func (yc *YmirCreate) createSpec() (*Ymir, *sqlgraph.CreateSpec) {
	var (
		_node = &Ymir{config: yc.config}
		_spec = sqlgraph.NewCreateSpec(ymir.Table, sqlgraph.NewFieldSpec(ymir.FieldID, field.TypeInt))
	)
	if value, ok := yc.mutation.Version(); ok {
		_spec.SetField(ymir.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	return _node, _spec
}

// YmirCreateBulk is the builder for creating many Ymir entities in bulk.
type YmirCreateBulk struct {
	config
	builders []*YmirCreate
}

// Save creates the Ymir entities in the database.
func (ycb *YmirCreateBulk) Save(ctx context.Context) ([]*Ymir, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ycb.builders))
	nodes := make([]*Ymir, len(ycb.builders))
	mutators := make([]Mutator, len(ycb.builders))
	for i := range ycb.builders {
		func(i int, root context.Context) {
			builder := ycb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*YmirMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ycb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ycb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ycb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ycb *YmirCreateBulk) SaveX(ctx context.Context) []*Ymir {
	v, err := ycb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ycb *YmirCreateBulk) Exec(ctx context.Context) error {
	_, err := ycb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ycb *YmirCreateBulk) ExecX(ctx context.Context) {
	if err := ycb.Exec(ctx); err != nil {
		panic(err)
	}
}
