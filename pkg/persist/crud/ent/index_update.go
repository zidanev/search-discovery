// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/application"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/index"
	"github.com/kubuskotak/king/pkg/persist/crud/ent/predicate"
)

// IndexUpdate is the builder for updating Index entities.
type IndexUpdate struct {
	config
	hooks    []Hook
	mutation *IndexMutation
}

// Where appends a list predicates to the IndexUpdate builder.
func (iu *IndexUpdate) Where(ps ...predicate.Index) *IndexUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IndexUpdate) SetName(s string) *IndexUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (iu *IndexUpdate) SetApplicationID(id string) *IndexUpdate {
	iu.mutation.SetApplicationID(id)
	return iu
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (iu *IndexUpdate) SetNillableApplicationID(id *string) *IndexUpdate {
	if id != nil {
		iu = iu.SetApplicationID(*id)
	}
	return iu
}

// SetApplication sets the "application" edge to the Application entity.
func (iu *IndexUpdate) SetApplication(a *Application) *IndexUpdate {
	return iu.SetApplicationID(a.ID)
}

// Mutation returns the IndexMutation object of the builder.
func (iu *IndexUpdate) Mutation() *IndexMutation {
	return iu.mutation
}

// ClearApplication clears the "application" edge to the Application entity.
func (iu *IndexUpdate) ClearApplication() *IndexUpdate {
	iu.mutation.ClearApplication()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IndexUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IndexUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IndexUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IndexUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IndexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(index.Table, index.Columns, sqlgraph.NewFieldSpec(index.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(index.FieldName, field.TypeString, value)
	}
	if iu.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   index.ApplicationTable,
			Columns: []string{index.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   index.ApplicationTable,
			Columns: []string{index.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{index.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IndexUpdateOne is the builder for updating a single Index entity.
type IndexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IndexMutation
}

// SetName sets the "name" field.
func (iuo *IndexUpdateOne) SetName(s string) *IndexUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (iuo *IndexUpdateOne) SetApplicationID(id string) *IndexUpdateOne {
	iuo.mutation.SetApplicationID(id)
	return iuo
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableApplicationID(id *string) *IndexUpdateOne {
	if id != nil {
		iuo = iuo.SetApplicationID(*id)
	}
	return iuo
}

// SetApplication sets the "application" edge to the Application entity.
func (iuo *IndexUpdateOne) SetApplication(a *Application) *IndexUpdateOne {
	return iuo.SetApplicationID(a.ID)
}

// Mutation returns the IndexMutation object of the builder.
func (iuo *IndexUpdateOne) Mutation() *IndexMutation {
	return iuo.mutation
}

// ClearApplication clears the "application" edge to the Application entity.
func (iuo *IndexUpdateOne) ClearApplication() *IndexUpdateOne {
	iuo.mutation.ClearApplication()
	return iuo
}

// Where appends a list predicates to the IndexUpdate builder.
func (iuo *IndexUpdateOne) Where(ps ...predicate.Index) *IndexUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IndexUpdateOne) Select(field string, fields ...string) *IndexUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Index entity.
func (iuo *IndexUpdateOne) Save(ctx context.Context) (*Index, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IndexUpdateOne) SaveX(ctx context.Context) *Index {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IndexUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IndexUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IndexUpdateOne) sqlSave(ctx context.Context) (_node *Index, err error) {
	_spec := sqlgraph.NewUpdateSpec(index.Table, index.Columns, sqlgraph.NewFieldSpec(index.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Index.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, index.FieldID)
		for _, f := range fields {
			if !index.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != index.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(index.FieldName, field.TypeString, value)
	}
	if iuo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   index.ApplicationTable,
			Columns: []string{index.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   index.ApplicationTable,
			Columns: []string{index.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Index{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{index.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
