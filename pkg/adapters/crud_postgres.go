// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"database/sql"
	"fmt"

	"entgo.io/ent/dialect"
	sqlEnt "entgo.io/ent/dialect/sql"
	"github.com/rs/zerolog/log"
	_ "github.com/lib/pq"
)

var CrudPostgreOpen = sqlEnt.OpenDB // CrudPostgreOpen will invoke to test case.

// CrudPostgre is data of instances.
type CrudPostgres struct {
	User     string `json:"user"`
	Password string `json:"password"`
	Host     string `json:"host"`
	Port     string `json:"port"`
	Database string `json:"database"`
	Client *sqlEnt.Driver
}

// Open is open the connection of postgre.
func (c *CrudPostgres) Open() (*sqlEnt.Driver, error) {
	if c.Client == nil {
		return nil, fmt.Errorf("driver was failed to connected")
	}
	return c.Client, nil
}

// Connect is connected the connection of postgre.
func (c *CrudPostgres) Connect() (err error) {
	var db *sql.DB
	db, err = sql.Open("postgres", fmt.Sprintf("postgres://%s:%s@%s:%s/%s?search_path=public&sslmode=disable", c.User, c.Password, c.Host, c.Port, c.Database))
	if err != nil {
		log.Error().Err(err).Msg("sql db is failed to open")
		return err
	}
	c.Client = CrudPostgreOpen(dialect.Postgres, db)
	pool := c.Client.DB()
	pool.SetMaxOpenConns(1)

	return nil
}

// Disconnect is disconnect the connection of postgre.
func (c *CrudPostgres) Disconnect() error {
	return c.Client.Close()
}

// WithCrudPostgres option function to assign on adapters.
func WithCrudPostgres(driver Driver[*sqlEnt.Driver]) Option {
	return func(a *Adapter) {
		if err := driver.Connect(); err != nil {
			panic(err)
		}
		open, err := driver.Open()
		if err != nil {
			panic(err)
		}
		if err := open.DB().Ping(); err != nil {
			panic(err)
		}
		a.CrudPostgres = driver.(*CrudPostgres)
	}
}
