// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"context"
	"fmt"
	"time"

	"github.com/rs/zerolog/log"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// CrudMongoDB is data of instances.
type CrudMongoDB struct {
	URI        string `json:"uri"`
	Database   string `json:"database"`
	Collection string `json:"collection"`
	Client     *mongo.Client
}

// Open is open the connection of mongodb.
func (c *CrudMongoDB) Open() (*mongo.Client, error) {
	if c.Client == nil {
		return nil, fmt.Errorf("client was failed to connected")
	}
	return c.Client, nil
}

// Connect is connected the connection of mongodb.
func (c *CrudMongoDB) Connect() (err error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	clientOptions := options.Client().ApplyURI(c.URI)
	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		log.Error().Err(err).Msg("mongodb client is failed to connect")
		return err
	}

	c.Client = client

	return nil
}

// Disconnect is disconnect the connection of mongodb.
func (c *CrudMongoDB) Disconnect() error {
	if c.Client != nil {
		return c.Client.Disconnect(context.Background())
	}
	return nil
}

// WithCrudMongoDB option function to assign on adapters.
func WithCrudMongoDB(driver Driver[*mongo.Client]) Option {
	return func(a *Adapter) {
		if err := driver.Connect(); err != nil {
			panic(err)
		}
		client, err := driver.Open()
		if err != nil {
			panic(err)
		}
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		if err := client.Ping(ctx, nil); err != nil {
			panic(err)
		}
		a.CrudMongoDB = driver.(*CrudMongoDB)
	}
}
